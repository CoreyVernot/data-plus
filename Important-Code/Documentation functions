getDemo(server)
  Description:
    Connects to a database and returns the demographic data
  Arguments:
    server
      Character string for name of ODBC server  

getRx(years = c(10,11,12), server = "SQLServer_IRI" )
  Description:
    Connects to a database and returns the prescription drug data for a specified set of years (2010, 2011, 2012)
  Arguments:
    years
      Integer vector refering to the years (without century) to draw from the database
    server
      Character string for name of ODBC server  

findK0(rx, panelids, brands)
  Description:
    Find the start timeunit(4 weeks per timeunit) of prescription for each individual and returns a dataframe with 
    the associated k values (number of timeunits before or after start of prescription) 
  Arguments:
    rx
      Prescription data returned from getRx()
    panelids
      Numeric vector of individuals' ids
    brands
      Character vector of brand names for a generic drug
  
findJ0(rx, panelids, Medical_Condition, use_sample = F)
  Description:
    Find the start timeunit(4 weeks per timeunit) of prescription for each individual and returns a dataframe with
    the associated j values (number of timeunits before or after start of prescription)
  Arguments:
    rx
      Prescription data returned from getRx()
    panelids
      Numeric vector of individuals' ids
    Medical_Condition
      Character vector of medical conditions
    use_sample
      Should prescription data include samples and brands which are classified as other prescription/sample?
  Miscellaneous:
    The difference between findK0() and findJ0() is that the first function finds the start of prescription for a specific drug
    while the second function finds the start of prescription for a medical condition, which contains one or more drugs.

getPanelIDs(..., rx, demo, static_panel = T, HHSizes=1, Medical_Condition = NA, new = T, only_first_rx = F, use_sample = F)
  Description:
    Find set(s) of individuals that use prescription brands associated with specific drug(s).
  Arguments:
    ...
      One or more character vectors referring to common names of sets of drugs. Each vector refers to a separate drug and returns a separate sample.
    rx
      Prescription data returned from getRx()
    demo
      Demographic data returned from getDemo()
    static_panel
      Should only individuals in the static panel be used?
    HHSizes
      Integer vector of length > 0 referring to the allowable household sizes
    Medical_Condition
      No specification by default, or else a character vector of medical conditions
    new
      Should only include individuals who started their new presciptions within the study period? 
    only_first_rx
      Should only individuals who started their first prescription within the study period be included?
    use_sample
      Should prescription data include samples and brands which are classified as other prescription/sample?
    
getFoodList()
  Description:
    Returns a list of food categories and the corresponding category descriptions

getNut(server = "SQLServer_BECR", nutrition)
  Description:
    Connects to a database and returns a dataframe of serving sizes and nutrients for each upc
  Arguments:
    server
      Character string for name of ODBC server
    nutrition
      Character vector consisting of one or more nutritions

getFood(server = "SQLServer_IRI", data, panelIDs)
  Description:
    Connects to a database and returns a dataframe of transactions dates, upc, food categories, ounces and fluid ounces
    for each individual
  Arguments:
    server
      Character string for name of ODBC server
    data
      Character vector of the names of data within the database
    panelIDs
      Numeric vector of individuals' ids

getTrans(ShowFoodOptions = FALSE, ShowNutrientOptions = FALSE, ShowYearOptions = FALSE, 
         FoodType = c("BAK_DES","BEV","BFAST_DAIRY","BFLS","CANDY","CSB","FR_MEAL","FVM","RW","SNACKS","SS_MEAL"),
         Nutrition = c("calories", "cholesterol", "fiber", "protein", "sat_fat", "sodium", "sugars", "tot_carb", "tot_fat"),
         PanelIDs = NA, Year = c(8,9,10,11,12), becr_server = "SQLServer_BECR", iri_server = "SQLServer_IRI")
  Description:
    Connects to two databases, merges getNut() and getFood(), and returns a dataframe of nutritions, transaction dates, upc, 
    food categories, serving sizes, ounces, and fluid ounces for each individual.
  Arguments:
    ShowFoodOptions
      User friendly options of whether to choose food categories. 
      If TRUE, choose food categories interactively in console panel from getFoodList(); otherwise, all food categories in FoodType
      argument are included.
    ShowNutrientOptions
      User friendly options of whether to choose nutrients.
      If TRUE, choose nutritions interactively in console panel from the given nutrition list; otherwise, all nutritions in Nutrition
      argument are included.
    ShowYearOptions
      User friendly options of whether to choose years.
      If TRUE, choose years (without centuries) in console panel from the given year list; otherwise, all years in Year argument are included.
    FoodType
      Character vector of all food categories in getFoodList()
    Nutrition
      Character vector of all nutritions in the database
    PanelIDs
      Numeric vector of individuals' ids from getPanelIDs()
    becr_server
      Character string for name of ODBC server which consists of nutrition information
    iri_server
      Character string for name of ODBC server which consists of transaction information in retail stores

timeunitKey()
  Description:
    Creates a dataframe for dates and the corresponding timeunit pairs

cleanData(trans, rx, brands)
  Description:
    Clean transaction data, summarize each nutrition based on individual and timeunit, calculate all aggregated nutritions 
    per total calories, and return as a dataframe
  Arguments:
    trans
      Transaction data returned from getTrans()
    rx
      PreScription data returned from getRx()
    brands
      Character vector of brand names for a generic drug
